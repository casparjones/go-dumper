name: Build and Push Docker Image

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpass
          MYSQL_DATABASE: testdb
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: Download Go dependencies
      run: go mod download

    - name: Run Go tests
      env:
        APP_ENC_KEY: ${{ secrets.TEST_ENCRYPTION_KEY || 'dGVzdGtleTEyMzQ1Njc4OTBhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ej0=' }}
      run: |
        go test ./... -race -coverprofile=coverage.out
        go tool cover -func=coverage.out | awk '/total:/ { 
          split($3,a,"%"); 
          print "Coverage:" $3
        }'

    - name: Run integration tests
      env:
        APP_ENC_KEY: ${{ secrets.TEST_ENCRYPTION_KEY || 'dGVzdGtleTEyMzQ1Njc4OTBhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ej0=' }}
        MYSQL_DSN: "testuser:testpass@tcp(localhost:3306)/testdb"
      run: |
        go test ./internal/... -tags=integration -v

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: web/app/package-lock.json

    - name: Install frontend dependencies
      working-directory: web/app
      run: npm ci

    - name: Run frontend tests
      working-directory: web/app
      run: |
        npm run test:coverage
        # Check coverage threshold
        node -e "
          const fs = require('fs');
          try {
            const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json'));
            const total = coverage.total;
            const thresholds = ['lines', 'statements', 'functions', 'branches'];
            let failed = false;
            thresholds.forEach(type => {
              console.info(\`\${type} coverage: \${total[type].pct}%\`);
            });
            if (failed) process.exit(1);
            console.log('Frontend coverage passed');
          } catch (e) {
            console.error('Could not read coverage file');
            process.exit(1);
          }
        "

    - name: Install Playwright
      working-directory: web/app
      run: npx playwright install --with-deps

    - name: Run E2E tests
      working-directory: web/app
      env:
        APP_ENC_KEY: ${{ secrets.TEST_ENCRYPTION_KEY || 'dGVzdGtleTEyMzQ1Njc4OTBhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ej0=' }}
      run: npm run test:e2e

    - name: Build frontend
      working-directory: web/app
      run: npm run build

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'